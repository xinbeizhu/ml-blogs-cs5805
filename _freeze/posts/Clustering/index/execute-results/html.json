{
  "hash": "89ac365da5dba71a690ae9c09625afef",
  "result": {
    "markdown": "---\ntitle: Clustering\nauthor: Xinbei Zhu\ndate: 2023-11-8\ncategories:\n  - code\n  - analysis\nimage: clustering.jpg\n---\n\n\n\nLet's talk about Clustering in this blog.\n\nClustering in machine learning is like organizing a big, mixed-up collection of things into groups based on similarities. Imagine we have a bunch of different fruits mixed together and we want to sort them out. Clustering is like grouping apples with apples, bananas with bananas, and so on, based on their features like color, size, or taste.\n\nIn machine learning, clustering algorithms look at data and try to find these natural groupings. The algorithm scans through the data and tries to figure out which items are similar to each other. It's like it's asking: \"Does this data point look more like an apple or a banana?\"\n\nThis is useful because sometimes we have a lot of data but we don't know what categories exist in it. Clustering helps us find these categories automatically, making it easier to understand and use the data. For example, a website could use clustering to group together similar news articles, so it's easier for readers to find the stories they're interested in.\n\n### Task Demo\n\nI utilize the 20 Newsfroups Dataset from scikit-learn cluster news articles into groups. Preprocess text data, convert it to TF-IDF vectors, and use an algorithm like K-Means or DBSCAN. Analyze the resulting clusters to see if they make sense in terms of news categories.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Load the dataset\ncategories = ['alt.atheism', 'comp.graphics', 'sci.med', 'soc.religion.christian']\nnewsgroups = fetch_20newsgroups(subset='all', categories=categories, shuffle=True, random_state=42)\n\n# Text preprocessing with TF-IDF\nvectorizer = TfidfVectorizer(stop_words='english')\nX = vectorizer.fit_transform(newsgroups.data)\n\n# Apply K-Means clustering\nnum_clusters = 4  # As we have chosen 4 categories\nkm = KMeans(n_clusters=num_clusters, random_state=42)\nkm.fit(X)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=4, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=4, random_state=42)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Visualize the results\nlabels = km.labels_\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X.toarray())\n\nplt.figure(figsize=(10, 10))\nfor i in range(num_clusters):\n    cluster = X_pca[labels == i]\n    plt.scatter(cluster[:, 0], cluster[:, 1], label=f'Cluster {i}', edgecolors='black')\nplt.title(\"20 Newsgroups Text Clustering\")\nplt.xlabel(\"PCA Feature 1\")\nplt.ylabel(\"PCA Feature 2\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=823 height=819}\n:::\n:::\n\n\nThe generated plot using PCA (Principal Component Analysis) to reduce the data to two dimensions gives a visual representation of how the documents are grouped after applying K-Means clustering.\n\nThis plot reveals that the clusters have minimal overlap, indicating effective separation and good model performance. Besides, the presence of similarities among documents in the green, orange, and red clusters is obvious from their clustering pattern. The dense clustering of green and orange spots implies that their content is quite similar. Conversely, the sparser distribution of blue clusters might suggest a greater diversity in the content of these documents.\n\nLet's do it another way by using DBSCAN.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Standardize features by removing the mean and scaling to unit variance\nX_std = StandardScaler(with_mean=False).fit_transform(X)\n\n# Apply DBSCAN clustering\ndbscan = DBSCAN(eps=0.5, min_samples=5)\nclusters = dbscan.fit_predict(X_std)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Visualize the results\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X_std.toarray())\n\nplt.figure(figsize=(10, 10))\nunique_clusters = set(clusters)\nfor cluster in unique_clusters:\n    if cluster == -1:  # Noise points\n        color = 'black'\n    else:\n        color = plt.cm.nipy_spectral(float(cluster) / len(unique_clusters))\n    cluster_points = X_pca[clusters == cluster]\n    plt.scatter(cluster_points[:, 0], cluster_points[:, 1], c=[color], edgecolors='black', label=f'Cluster {cluster}')\nplt.title(\"20 Newsgroups Text Clustering with DBSCAN\")\nplt.xlabel(\"PCA Feature 1\")\nplt.ylabel(\"PCA Feature 2\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=828 height=819}\n:::\n:::\n\n\nThe plot doesn't display effectively, suggesting that k-means clustering might be a more suitable approach for the 20 News groups dataset.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}